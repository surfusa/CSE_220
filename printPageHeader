#include<stdio.h>

./._print.c
./a.out NEWTON.PAS /*loads NEWTON.PAS*/


static void printPageHeader(const char *sourceName, const char *date);


void printLine(char *line, char *sourceNameToPrint, char *dateToPrint, int lineNumber)
{
    char saveCh;
    char *saveChp = NULL;
    static int lineCount = MAX_LINES_PER_PAGE;
    ++ lineCount;

    if (++line_count > MAX_LINES_PER_PAGE)
    {
        printPagePeader(char sourceNameToPrint, char dateToPrint);
        lineCount = 0;
    }

    printf("%4d: ", lineNumber);

    while (strlen(line) > MAX_PRINT_LINE_LENGTH)
    {
        saveCh = line[MAX_LINES_PER_PAGE];
        line[MAX_PRINT_LINE_LENGTH] = '\0';
        printf("%s\n", line);
        line[MAX_PRINT_LINE_LENGTH] = save_ch;
        line = line + MAX_PRINT_LINE_LENGTH;
    }
    
    printf("%s", line);
}

static void printPageHeader(const char *sourceName, const char *date)
{
    char path[128];
    static int pageNumber = 0;
    ++ pageNumber;
    getcwd (path, 128);
    printf("\n \n       Page %4d %s/%s %s\n \n", pageNumber, path, sourceName, date);
}

int main (int argc, const char **argv)
{
    FILE *source_file;
    char source_name[MAX_FILE_NAME_LENGTH];
    char date[DATE_STRING_LENGTH];

   if(argc < 2)
   {
        printf("Usage: lister file \n");
        return 1;
   }

   sourceFile = initLister (argv[1], sourceName, date);

   while(getSourceLine(sourceFile, sourceName, date));

   return 0;
}
FILE *initLister(const char *name, char *sourceFileName, char *date)
{
    time_t timer;
    struct tm *timeInfo
    FILE *file;

    strncpy (sourceFileName, name, MAX_FILE_NAME_LENGTH);

    time (&timer);
    timeInfo = localTime (&timer);
    strftime (date, DATE_STRING_LENGTH, "%a %b %d %T %Y", timeInfo);

    file = fopen (name, "r");

    return file;
}
BOOLEAN getSourceLine(FILE *src_file, char *srcName, char *todaysDate)
{
    char printBuffer[MAX_SOURCE_LINE_LENGTH + 9];
    char sourceBuffer[MAX_SOURCE_LINE_LENGTH];
    static int lineNumber = 0;

    fgets(sourceBuffer, MAX_SOURCE_LINE_LENGTH, srcFile);
    ++ lineNumber;
    printLine(sourceBuffer, srcName, todaysDate, lineNumber);

    if (!feof(srcFile))
    {
        return (TRUE);
    }
    else
    {
        return (FALSE);
    }
}

#define CSE220_project2_common_h

#include <stdio.h>
#include <sys/types.h>
#include <string.h>
#include <time.h>

#define FORM_FEED_CHAR          '\f'
#define MAX_FILE_NAME_LENGTH    32
#define MAX_SOURCE_LINE_LENGTH  256
#define MAX_PRINT_LINE_LENGTH   80
#define MAX_LINES_PER_PAGE      50
#define DATE_STRING_LENGTH      26

typedef enum {
    FALSE, TRUE,
}BOOLEAN;

FILE *init_lister(const char *, char source_file_name[], char dte[]);
BOOLEAN get_source_line(FILE *, char src_name[], char todays_date[]);
void print_line(char *, char source_name[], char date_to_print[]);

#endif
