#include<stdio.h>

#include <stdio.h>
#include <sys/types.h>
#include <string.h>
#include <time.h>

#define FORM_FEED_CHAR          '\f'
#define MAX_FILE_NAME_LENGTH    32
#define MAX_SOURCE_LINE_LENGTH  256
#define MAX_PRINT_LINE_LENGTH   80
#define MAX_LINES_PER_PAGE      50
#define DATE_STRING_LENGTH      26

typedef enum {    FALSE, TRUE, }BOOLEAN;

FILE *init_lister(const char * file_name, char* source_file_name, char* date);
BOOLEAN get_source_line(FILE* file, const char* src_name, const char* todays_date);
void print_line(char* line, const char* source_name, const char* date_to_print, int line_number);


./._print.c
./a.out NEWTON.PAS /*loads NEWTON.PAS*/


static void print_page_header(const char *source_name, const char *date);

// Creates the source line (prints it)
void print_line(char* line, const char* source_name_to_print, const char* date_to_print, int line_number)
{
    char save_ch;
    char* save_chp = NULL;
    static int line_count = MAX_LINES_PER_PAGE;
    
    ++ line_count;
    
    //new line
    if(line_count > MAX_LINES_PER_PAGE)
    {
        print_page_header(source_name_to_print, date_to_print);
		line_count = 0;
    }

	printf("%4d: ", line_number);

    while(strlen(line) > MAX_PRINT_LINE_LENGTH) 
    {
        save_ch = line[MAX_PRINT_LINE_LENGTH];
        line[MAX_PRINT_LINE_LENGTH] = '\0';
        printf("%s\n", line);
        line[MAX_PRINT_LINE_LENGTH] = save_ch;
		line = line + MAX_PRINT_LINE_LENGTH;
    }
    printf("%s", line);
}

//Creates the page header (prints it)
static void print_page_header(const char* source_name, const char* date)
{
	char path[128];
    static int page_number = 0;
    ++ page_number;
	getcwd(path, 128);
    printf("\n\nPage %4d %s/%s  %s\n\n", page_number, path, source_name, date);
}

//Creates a Null page header just in case.
int main()
{
	FILE* file = NULL;
	char name[MAX_FILE_NAME_LENGTH];
	char date[DATE_STRING_LENGTH];

	file = init_lister("test.c", name, date);

	if(file == NULL) printf("Failed to open file\n");
	if(strcmp(name, "test.c")) printf("Failed to copy file name\n");
	printf("Date: %s", date);

	get_source_line(file, name, date);
}


//main page header
int main(int argc, const char** argv)
{
    FILE* source_file;
    char source_name[MAX_FILE_NAME_LENGTH];
    char date[DATE_STRING_LENGTH];

    if(argc < 2)
	{
		printf("Usage: lister file\n");
		return 1;
	}

    source_file = init_lister(argv[1], source_name, date);
    
    while(get_source_line(source_file, source_name, date));

    return 0;
}

//opens and finds valuable info in the file
FILE* init_lister(const char *name, char* source_file_name, char* date)
{
	time_t rawtime;
    struct tm* time_info;
    FILE* file;

    // Copies file name to source_file_name buffer to be used
    strncpy(source_file_name, name, MAX_FILE_NAME_LENGTH);

    // time string created
	time(&rawtime);
    time_info = localtime(&rawtime);
    strftime(date, DATE_STRING_LENGTH, "%a %b %d %T %Y", time_info);

    // Open the file for reading
    file = fopen(name, "r");

    return file;
}

// Gets one line of the src_file and echos it to the output
BOOLEAN get_source_line(FILE* src_file, const char* src_name, const char* todays_date)
{
    char source_buffer[MAX_SOURCE_LINE_LENGTH];
    static int line_number = 0;

    fgets(source_buffer, MAX_SOURCE_LINE_LENGTH, src_file);
	++line_number;
    print_line(source_buffer, src_name, todays_date, line_number);
    
    // If the file end has not been reached
    if(!feof(src_file))
    {
        return TRUE;
    }
    else
    {
        return FALSE;
    }
}
#endif
